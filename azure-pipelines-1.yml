trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: PropertiesFilePath
    value: '$(System.DefaultWorkingDirectory)/src/main/resources/application.properties'

jobs:
- job: DisplayKeyVaultValues
  steps:
  - checkout: self

  # Fetch values from Azure Key Vault
  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Az'
      KeyVaultName: 'variablecheck'
      SecretsFilter: '*'
      RunAsPreJob: false

  - script: |
      # Debug: Print current directory and contents of the directory
      echo "Current Directory: $(pwd)"
      echo "Contents of $(PropertiesFilePath):"
      cat $(PropertiesFilePath)
     

      # Replace values in application.properties
      sed -i "s/^spring.application.name=.*$/spring.application.name=$(AppName)/" $(PropertiesFilePath)
      sed -i "s/^server.port=.*$/server.port=$(PortNumber)/" $(PropertiesFilePath)

      # Debug: Print the modified contents of the file
      echo "Modified Contents of $(PropertiesFilePath):"
      cat $(PropertiesFilePath)
    displayName: 'Replace values in application.properties'

  - task: Maven@4
    inputs:
      mavenPomFile: 'pom.xml'
      options: '-DskipTests'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.17'
      mavenVersionOption: 'Default'
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/target'
      ArtifactName: 'my-artifact'
      publishLocation: 'Container'
    displayName: 'Publish artifact'

# - job: BuildDockerImage
#   dependsOn: BuildAndPublish
#   steps:
#   - checkout: self

  # Download the artifact published in the previous job
  - download: current
    artifact: 'my-artifact'


  - task: Docker@2
    inputs:
      containerRegistry: 'docker'
      repository: 'Feroz2511'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'



#  # Build the Docker image
#   - task: Docker@2
#     inputs:
#       command: 'build'
#       dockerfile: '$(DockerfilePath)'
#       tags: '$(DockerImageName):$(Build.BuildId)'
#       buildContext: '$(Pipeline.Workspace)'
#       arguments: '--build-arg SPRING_APPLICATION_NAME=$(AppName) --build-arg SERVER_PORT=$(PortNumber)'
#     displayName: 'Build Docker Image'

#   # Push the Docker image to a container registry (replace 'your-container-registry' with your actual registry)
#   - task: Docker@2
#     inputs:
#       command: 'push'
#       containerRegistry: 'your-container-registry'
#       repository: '$(DockerImageName)'
#       tags: '$(Build.BuildId)'
#     displayName: 'Push Docker Image'